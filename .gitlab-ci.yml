image: registry.eulix.xyz/collab/infra/public-service/maven:3.6.3-openjdk-11

stages:
  - validate
  - docker
  - sign

variables:
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version"

cache:
  key: ${CI_JOB_NAME}
  paths:
    - .m2/repository
    - .sonar/cache

cloc:code:
  stage: validate
  image:
    name: aldanial/cloc
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - sed -i "s#http://deb.debian.org#http://opentuna.cn#g" /etc/apt/sources.list && sed -i "s#http://security.debian.org#http://opentuna.cn#g" /etc/apt/sources.list
    - apt update && apt install mariadb-client -y
    - export ENV_TIME=`date +%Y%m%d` && echo $ENV_TIME
    - /usr/src/cloc --sql 1 --sql-append --sql-project $CI_PROJECT_NAME . | grep insert | tee cloc.sql
    - mysql -h $CLOC_SQL_HOST -P$CLOC_SQL_PORT -u$CLOC_SQL_USERNAME -p$CLOC_SQL_PASSWORD -e "create database if not exists bpcode$ENV_TIME;"
    - mysql -h $CLOC_SQL_HOST -P$CLOC_SQL_PORT -u$CLOC_SQL_USERNAME -p$CLOC_SQL_PASSWORD --database "bpcode$ENV_TIME" -e "create table if not exists metadata (timestamp varchar(500),Project varchar(500),elapsed_s real);"
    - mysql -h $CLOC_SQL_HOST -P$CLOC_SQL_PORT -u$CLOC_SQL_USERNAME -p$CLOC_SQL_PASSWORD --database "bpcode$ENV_TIME" -e "create table if not exists t (Project varchar(500) ,Language varchar(500) ,File varchar(500) ,File_dirname varchar(500) ,File_basename varchar(500) ,nBlank integer ,nComment integer ,nCode integer ,nScaled real );"
    - mysql -h $CLOC_SQL_HOST -P$CLOC_SQL_PORT -u$CLOC_SQL_USERNAME -p$CLOC_SQL_PASSWORD --database "bpcode$ENV_TIME" -e "delete from metadata where Project ='$CI_PROJECT_NAME';"
    - mysql -h $CLOC_SQL_HOST -P$CLOC_SQL_PORT -u$CLOC_SQL_USERNAME -p$CLOC_SQL_PASSWORD --database "bpcode$ENV_TIME" -e "delete from t where Project ='$CI_PROJECT_NAME';"
    - mysql -h $CLOC_SQL_HOST -P$CLOC_SQL_PORT -u$CLOC_SQL_USERNAME -p$CLOC_SQL_PASSWORD --database "bpcode$ENV_TIME" -e "SOURCE cloc.sql"
    - rm -rf cloc.sql

test:
  stage: validate
  image: busybox
  script:
    - echo "Do a test here"

sonarqube-check-push:
  rules:
    - if: $CI_COMMIT_BRANCH == 'dev'
  stage: validate
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar" 
    GIT_DEPTH: "0" 
  script: 
    - mvn $MAVEN_CLI_OPTS test-compile
    - mvn $MAVEN_CLI_OPTS sonar:sonar -Dsonar.projectKey=eulixplatform-services -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_TOKEN -Dsonar.branch.name=$CI_COMMIT_BRANCH

sonarqube-check-mr:
  rules:
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == 'dev'
  stage: validate
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar" 
    GIT_DEPTH: "0" 
  script: 
    - mvn $MAVEN_CLI_OPTS test-compile
    - mvn $MAVEN_CLI_OPTS sonar:sonar -Dsonar.projectKey=eulixplatform-services -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_TOKEN -Dsonar.pullrequest.key=$CI_MERGE_REQUEST_IID -Dsonar.pullrequest.branch=$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME -Dsonar.pullrequest.base=$CI_MERGE_REQUEST_TARGET_BRANCH_NAME -Dsonar.gitlab.project_id=$CI_PROJECT_ID -Dsonar.gitlab.commit_sha=$CI_COMMIT_SHA -Dsonar.gitlab.ref_name=$CI_COMMIT_REF_NAME -Dsonar.gitlab.ping_user=$GITLAB_USER_LOGIN -Dsonar.gitlab.max_blocker_issues_gate=-1 -Dsonar.gitlab.max_critical_issues_gate=-1 -Dsonar.gitlab.comment_no_issue=true -Dsonar.gitlab.disable_inline_comments=true -Dsonar.gitlab.only_issue_from_commit_file=false -Dsonar.gitlab.only_issue_from_commit_line=true -Dsonar.gitlab.disable_global_comment=false -Dsonar.gitlab.failure_notification_mode=commit-status -Dsonar.gitlab.quality_gate_fail_mode=NONE -Dsonar.gitlab.merge_request_discussion=false -Dsonar.gitlab.fail_on_qualitygate=false -Dsonar.gitlab.build_init_state=running

validate:build:
  stage: validate
  rules:
    - if: $CI_MERGE_REQUEST_ID
  tags:
    - x86_64
  script:
    - mvn $MAVEN_CLI_OPTS test-compile

validate:test:
  stage: validate
  rules:
    - if: $CI_MERGE_REQUEST_ID
  tags:
    - x86_64
  script:
    - mvn $MAVEN_CLI_OPTS verify

validate:package:
  stage: validate
  rules:
    - if: $CI_COMMIT_BRANCH || $CI_MERGE_REQUEST_ID
  tags:
    - x86_64
  script:
    - mvn $MAVEN_CLI_OPTS package
    - wget https://gosspublic.alicdn.com/ossutil/1.7.13/ossutil64 -O /usr/bin/ossutil64 && chmod +x /usr/bin/ossutil64
    - ossutil64 -i $OSS_CI_EULIX_RES_ACCESS_ID -k $OSS_CI_EULIX_RES_ACCESS_KEY -e $OSS_CI_EULIX_RES_ENDPOINT cp target/eulixplatform-services-*.jar -f $OSS_CI_EULIX_RES_BUCKET_DIR/eulixplatform-services/`head -1 VERSION`-alpha.$CI_PIPELINE_ID.jar
  artifacts:
    paths:
      - target/

docker:jvm:
  stage: docker
  dependencies:
    - validate:package
  only:
    variables: 
      - $CI_COMMIT_BRANCH
  except:
    variables: 
      - $CI_MERGE_REQUEST_ID
  tags:
    - docker_build-x86_64
  before_script: 
    - docker login -u $GITLAB_DOCKER_AUTH_USERNAME -p $GITLAB_DOCKER_AUTH_PASSWORD $GITLAB_DOCKER_REGISTRY_HOST
    - docker login -u $DOCKER_AUTH_USERNAME -p $DOCKER_AUTH_PASSWORD $DOCKER_REGISTRY_HOST
    - export DOCKER_BUILD_IMAGE=$DOCKER_REGISTRY_IMAGE/eulixplatform-services:`head -1 VERSION`-alpha.$CI_PIPELINE_ID
    - export DOCKER_LATEST_IMAGE=$DOCKER_REGISTRY_IMAGE/eulixplatform-services:$CI_COMMIT_BRANCH
    - export DOCKER_BUILD_IMAGE_GITLAB=$GITLAB_DOCKER_REGISTRY_IMAGE/eulixplatform-services:`head -1 VERSION`-alpha.$CI_PIPELINE_ID
    - export DOCKER_LATEST_IMAGE_GITLAB=$GITLAB_DOCKER_REGISTRY_IMAGE/eulixplatform-services:$CI_COMMIT_BRANCH
  script:
    - docker build --build-arg CI_PIPELINE_ID=$CI_PIPELINE_ID --build-arg CI_COMMIT_SHA=$CI_COMMIT_SHA -f src/main/docker/Dockerfile.jvm -t $DOCKER_BUILD_IMAGE .
    - docker tag $DOCKER_BUILD_IMAGE $DOCKER_LATEST_IMAGE
    - docker tag $DOCKER_BUILD_IMAGE $DOCKER_BUILD_IMAGE_GITLAB
    - docker tag $DOCKER_BUILD_IMAGE $DOCKER_LATEST_IMAGE_GITLAB
    - docker push $DOCKER_BUILD_IMAGE
    - docker push $DOCKER_LATEST_IMAGE
    - docker push $DOCKER_BUILD_IMAGE_GITLAB
    - docker push $DOCKER_LATEST_IMAGE_GITLAB

artifacts-sign:
  stage: sign
  only:
    variables: 
      - $CI_COMMIT_BRANCH
  except:
    variables: 
      - $CI_MERGE_REQUEST_ID
  image:
    name: registry.eulix.xyz/collab/infra/infrastructure/sigstore/cosign:v1.10.1
    entrypoint: [''] 
  before_script:
    - cosign login -u $GITLAB_DOCKER_AUTH_USERNAME -p $GITLAB_DOCKER_AUTH_PASSWORD $GITLAB_DOCKER_REGISTRY_HOST
    - cosign login -u $DOCKER_AUTH_USERNAME -p $DOCKER_AUTH_PASSWORD $DOCKER_REGISTRY_HOST
    - export DOCKER_BUILD_IMAGE=$DOCKER_REGISTRY_IMAGE/eulixplatform-services:`head -1 VERSION`-alpha.$CI_PIPELINE_ID
    - export DOCKER_LATEST_IMAGE=$DOCKER_REGISTRY_IMAGE/eulixplatform-services:$CI_COMMIT_BRANCH
    - export DOCKER_BUILD_IMAGE_GITLAB=$GITLAB_DOCKER_REGISTRY_IMAGE/eulixplatform-services:`head -1 VERSION`-alpha.$CI_PIPELINE_ID
    - export DOCKER_LATEST_IMAGE_GITLAB=$GITLAB_DOCKER_REGISTRY_IMAGE/eulixplatform-services:$CI_COMMIT_BRANCH
    - echo $COSIGN_KEY | base64 -d > /tmp/cosign.key
  script:
    - cosign sign --key /tmp/cosign.key $DOCKER_BUILD_IMAGE
    - cosign sign --key /tmp/cosign.key $DOCKER_LATEST_IMAGE
    - cosign sign --key /tmp/cosign.key $DOCKER_BUILD_IMAGE_GITLAB
    - cosign sign --key /tmp/cosign.key $DOCKER_LATEST_IMAGE_GITLAB
