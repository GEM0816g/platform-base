image: registry.eulix.xyz/collab/infra/public-service/maven:3.6.3-openjdk-11

include:
  - project: 'bp/ams-ci-template'
    ref: main
    file: '/sonarqube.yml'

stages:
  - validate
  - coverage
  - docker
  - sign
  - codelint

variables:
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version"
  ENV_SONARQUBE_TYPE: maven

cache:
  key: ${CI_JOB_NAME}
  paths:
    - .m2/repository
    - .sonar/cache

cloc:code:
  stage: validate
  image:
    name: aldanial/cloc
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - sed -i "s#http://deb.debian.org#http://opentuna.cn#g" /etc/apt/sources.list && sed -i "s#http://security.debian.org#http://opentuna.cn#g" /etc/apt/sources.list
    - apt update && apt install mariadb-client -y
    - export ENV_TIME=`date +%Y%m%d` && echo $ENV_TIME
    - /usr/src/cloc --sql 1 --sql-append --sql-project $CI_PROJECT_NAME . | grep insert | tee cloc.sql
    - mysql -h $CLOC_SQL_HOST -P$CLOC_SQL_PORT -u$CLOC_SQL_USERNAME -p$CLOC_SQL_PASSWORD -e "create database if not exists bpcode$ENV_TIME;"
    - mysql -h $CLOC_SQL_HOST -P$CLOC_SQL_PORT -u$CLOC_SQL_USERNAME -p$CLOC_SQL_PASSWORD --database "bpcode$ENV_TIME" -e "create table if not exists metadata (timestamp varchar(500),Project varchar(500),elapsed_s real);"
    - mysql -h $CLOC_SQL_HOST -P$CLOC_SQL_PORT -u$CLOC_SQL_USERNAME -p$CLOC_SQL_PASSWORD --database "bpcode$ENV_TIME" -e "create table if not exists t (Project varchar(500) ,Language varchar(500) ,File varchar(500) ,File_dirname varchar(500) ,File_basename varchar(500) ,nBlank integer ,nComment integer ,nCode integer ,nScaled real );"
    - mysql -h $CLOC_SQL_HOST -P$CLOC_SQL_PORT -u$CLOC_SQL_USERNAME -p$CLOC_SQL_PASSWORD --database "bpcode$ENV_TIME" -e "delete from metadata where Project ='$CI_PROJECT_NAME';"
    - mysql -h $CLOC_SQL_HOST -P$CLOC_SQL_PORT -u$CLOC_SQL_USERNAME -p$CLOC_SQL_PASSWORD --database "bpcode$ENV_TIME" -e "delete from t where Project ='$CI_PROJECT_NAME';"
    - mysql -h $CLOC_SQL_HOST -P$CLOC_SQL_PORT -u$CLOC_SQL_USERNAME -p$CLOC_SQL_PASSWORD --database "bpcode$ENV_TIME" -e "SOURCE cloc.sql"
    - rm -rf cloc.sql

test:
  stage: validate
  image: busybox
  script:
    - echo "Do a test here"

validate:build:
  stage: validate
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_MERGE_REQUEST_ID
  tags:
    - x86_64
  script:
    - mvn $MAVEN_CLI_OPTS test-compile

validate:test:
  stage: validate
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_MERGE_REQUEST_ID
  tags:
    - x86_64
  script:
    - mvn $MAVEN_CLI_OPTS org.jacoco:jacoco-maven-plugin:prepare-agent verify org.jacoco:jacoco-maven-plugin:report
    - echo "The Jacoco Report URLï¼šhttps://bp.pages.eulix.xyz/-/platform/eulixplatform-services/-/jobs/${CI_JOB_ID}/artifacts/target/site/jacoco/index.html"
  artifacts:
    paths:
      - target/site/jacoco/

validate:package:
  stage: validate
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_COMMIT_BRANCH
    - if: $CI_MERGE_REQUEST_ID
  tags:
    - x86_64
  script:
    - mvn $MAVEN_CLI_OPTS package
    - wget https://gosspublic.alicdn.com/ossutil/1.7.13/ossutil64 -O /usr/bin/ossutil64 && chmod +x /usr/bin/ossutil64
    - ossutil64 -i $OSS_CI_EULIX_RES_ACCESS_ID -k $OSS_CI_EULIX_RES_ACCESS_KEY -e $OSS_CI_EULIX_RES_ENDPOINT cp eulixplatform-opstage/target/eulixplatform-opstage-*.jar -f $OSS_CI_EULIX_RES_BUCKET_DIR/eulixplatform-services/`head -1 VERSION`-alpha.$CI_PIPELINE_ID.jar
    - ossutil64 -i $OSS_CI_EULIX_RES_ACCESS_ID -k $OSS_CI_EULIX_RES_ACCESS_KEY -e $OSS_CI_EULIX_RES_ENDPOINT cp eulixplatform-common/target/eulixplatform-common-*.jar -f $OSS_CI_EULIX_RES_BUCKET_DIR/eulixplatform-common/`head -1 VERSION`-alpha.$CI_PIPELINE_ID.jar
    - ossutil64 -i $OSS_CI_EULIX_RES_ACCESS_ID -k $OSS_CI_EULIX_RES_ACCESS_KEY -e $OSS_CI_EULIX_RES_ENDPOINT cp eulixplatform-registry/target/eulixplatform-registry-*.jar -f $OSS_CI_EULIX_RES_BUCKET_DIR/eulixplatform-registry/`head -1 VERSION`-alpha.$CI_PIPELINE_ID.jar
  artifacts:
    paths:
      - eulixplatform-opstage/target/
      - eulixplatform-common/target/
      - eulixplatform-registry/target/

docker:jvm:
  stage: docker
  dependencies:
    - validate:package
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_COMMIT_BRANCH
  tags:
    - docker_build-x86_64
  before_script: 
    - docker login -u $GITLAB_DOCKER_AUTH_USERNAME -p $GITLAB_DOCKER_AUTH_PASSWORD $GITLAB_DOCKER_REGISTRY_HOST
    - docker login -u $DOCKER_AUTH_USERNAME -p $DOCKER_AUTH_PASSWORD $DOCKER_REGISTRY_HOST
    - export DOCKER_BUILD_IMAGE=$DOCKER_REGISTRY_IMAGE/eulixplatform-services:`head -1 VERSION`-alpha.$CI_PIPELINE_ID
    - export DOCKER_LATEST_IMAGE=$DOCKER_REGISTRY_IMAGE/eulixplatform-services:$CI_COMMIT_BRANCH
    - export DOCKER_BUILD_IMAGE_GITLAB=$GITLAB_DOCKER_REGISTRY_IMAGE/eulixplatform-services:`head -1 VERSION`-alpha.$CI_PIPELINE_ID
    - export DOCKER_LATEST_IMAGE_GITLAB=$GITLAB_DOCKER_REGISTRY_IMAGE/eulixplatform-services:$CI_COMMIT_BRANCH
  script:
    - cd eulixplatform-opstage
    - docker build --build-arg CI_PIPELINE_ID=$CI_PIPELINE_ID --build-arg CI_COMMIT_SHA=$CI_COMMIT_SHA -f src/main/docker/Dockerfile.jvm -t $DOCKER_BUILD_IMAGE .
    - docker tag $DOCKER_BUILD_IMAGE $DOCKER_LATEST_IMAGE
    - docker tag $DOCKER_BUILD_IMAGE $DOCKER_BUILD_IMAGE_GITLAB
    - docker tag $DOCKER_BUILD_IMAGE $DOCKER_LATEST_IMAGE_GITLAB
    - docker push $DOCKER_BUILD_IMAGE
    - docker push $DOCKER_LATEST_IMAGE
    - docker push $DOCKER_BUILD_IMAGE_GITLAB
    - docker push $DOCKER_LATEST_IMAGE_GITLAB

artifacts-sign:
  stage: sign
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_COMMIT_BRANCH
  image:
    name: registry.eulix.xyz/collab/infra/infrastructure/sigstore/cosign:v1.10.1
    entrypoint: [''] 
  before_script:
    - cosign login -u $GITLAB_DOCKER_AUTH_USERNAME -p $GITLAB_DOCKER_AUTH_PASSWORD $GITLAB_DOCKER_REGISTRY_HOST
    - cosign login -u $DOCKER_AUTH_USERNAME -p $DOCKER_AUTH_PASSWORD $DOCKER_REGISTRY_HOST
    - export DOCKER_BUILD_IMAGE=$DOCKER_REGISTRY_IMAGE/eulixplatform-services:`head -1 VERSION`-alpha.$CI_PIPELINE_ID
    - export DOCKER_LATEST_IMAGE=$DOCKER_REGISTRY_IMAGE/eulixplatform-services:$CI_COMMIT_BRANCH
    - export DOCKER_BUILD_IMAGE_GITLAB=$GITLAB_DOCKER_REGISTRY_IMAGE/eulixplatform-services:`head -1 VERSION`-alpha.$CI_PIPELINE_ID
    - export DOCKER_LATEST_IMAGE_GITLAB=$GITLAB_DOCKER_REGISTRY_IMAGE/eulixplatform-services:$CI_COMMIT_BRANCH
    - echo $COSIGN_KEY | base64 -d > /tmp/cosign.key
  script:
    - cosign sign --key /tmp/cosign.key $DOCKER_BUILD_IMAGE
    - cosign sign --key /tmp/cosign.key $DOCKER_LATEST_IMAGE
    - cosign sign --key /tmp/cosign.key $DOCKER_BUILD_IMAGE_GITLAB
    - cosign sign --key /tmp/cosign.key $DOCKER_LATEST_IMAGE_GITLAB
